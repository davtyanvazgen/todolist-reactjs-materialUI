{"version":3,"sources":["components/todo.jsx","components/list.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","_this","setState","target","value","handleSbmit","preventDefault","checkText","props","allLists","findIndex","index","test","onAdd","complete","react_default","a","createElement","Fragment","Typography_default","variant","style","fontStyle","color","onSubmit","this","TextField_default","type","onChange","placeholder","height","Button_default","onClick","marginLeft","Component","TodoList","check","done","handleList","listStyle","textDecoration","backgroundColor","borderBottom","marginTop","List_default","ListItem_default","button","overflow","textOverflow","ListItemSecondaryAction_default","removeList","IconButton_default","aria-label","Delete_default","App","todos","addTodo","todo","concat","Object","toConsumableArray","deleteList","filter","each","_this2","border","borderRadius","width","textAlign","margin","minHeight","components_todo","map","list","defineProperty","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.329b15fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass TodoForm extends Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      text: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSbmit = event => {\r\n    event.preventDefault();\r\n    let checkText = true;\r\n    this.props.allLists.findIndex(index => {\r\n      if (index.text == this.state.text) {\r\n        return (checkText = false);\r\n      }\r\n    });\r\n\r\n    if (/\\S/.test(this.state.text) && checkText) {\r\n      this.props.onAdd({\r\n        text: this.state.text,\r\n        complete: false\r\n      });\r\n      this.setState({\r\n        text: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const buttonStyle = {\r\n      marginLeft: \"2px\"\r\n    };\r\n\r\n    const textFieldStyle = {\r\n      height: \"37px\"\r\n    };\r\n    const pfontStyle = {\r\n      fontStyle: \"oblique\",\r\n      color: \"white\"\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Typography variant=\"h4\">\r\n          <p style={pfontStyle}> To Do List</p>\r\n        </Typography>\r\n        <form onSubmit={this.handleSbmit}>\r\n          <TextField\r\n            type=\"text\"\r\n            value={this.state.text}\r\n            onChange={this.handleChange}\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter text\"\r\n            style={textFieldStyle}\r\n          />\r\n          <Button\r\n            onClick={this.handleSbmit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={buttonStyle}\r\n          >\r\n            ADD\r\n          </Button>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass TodoList extends Component {\r\n  state = {\r\n    check: this.props.done\r\n  };\r\n\r\n  handleList = () => {\r\n    if (this.state.check === false) {\r\n      this.setState({\r\n        check: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        check: false\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const listStyle = {\r\n      textDecoration: this.state.check ? \"line-through\" : \"\",\r\n      color: this.state.check ? \"red\" : \"\",\r\n      backgroundColor: \"pink\",\r\n      borderBottom: \"2px solid black\",\r\n      marginTop: \"-16px\"\r\n    };\r\n    const textStyle = {\r\n      overflow: \"hidden \",\r\n      textOverflow: \"ellipsis\"\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <List onClick={this.handleList}>\r\n          <ListItem button style={listStyle}>\r\n            <Typography style={textStyle} variant=\"subheading\">\r\n              {this.props.text}\r\n            </Typography>\r\n\r\n            <ListItemSecondaryAction onClick={this.props.removeList}>\r\n              <IconButton aria-label=\"Delete\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </List>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport TodoForm from \"./components/todo\";\nimport TodoList from \"./components/list\";\n\nclass App extends Component {\n  state = {\n    todos: [{ text: \"ARIVAAAAA\", complete: false }]\n  };\n\n  addTodo = todo => {\n    this.setState({\n      todos: [todo, ...this.state.todos]\n    });\n  };\n\n  deleteList = text => {\n    this.setState({\n      todos: this.state.todos.filter(each => text !== each.text)\n    });\n  };\n\n  render() {\n    const divStyle = {\n      border: \"3px solid rgb(189, 30, 30)\",\n      borderRadius: \"7px\",\n      width: \"25%\",\n      textAlign: \"center\",\n      margin: \"50px auto\",\n      backgroundColor: \"rgb(141, 162, 185)\",\n      minHeight: \"220px\"\n    };\n    const miniDivStyle = {\n      width: \"97%\",\n      margin: \"20px auto\"\n    };\n\n    return (\n      <div style={divStyle}>\n        <TodoForm allLists={this.state.todos} onAdd={this.addTodo} />\n        <div style={miniDivStyle}>\n          {this.state.todos.map((todo, index) => (\n            <TodoList\n              key={todo.text}\n              done={todo.complete}\n              text={todo.text}\n              removeList={() => this.deleteList(todo.text)}\n              done={todo.complete}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}